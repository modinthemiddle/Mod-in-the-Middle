/*
 * MIT License
 *
 * Copyright (c) 2021 Ki11er_wolf.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// ####################################################
// # ModInTheMiddle-ModBuilder subproject buildscript #
// ####################################################

/* ModBuilder specific plugins */
plugins {
    id 'java-gradle-plugin'
}

/* ModBuilder version (Set with gradle.properties) */
version property('version')

/* ModBuilder name and group/package (Set with gradle.properties) */
archivesBaseName = property('name')
group property('source-group')

/* ModBuilder Gradle-Plugin: ID & Main-Class definition*/
gradlePlugin {
    plugins {
         ModBuilder {
             //noinspection GroovyAssignabilityCheck
             id = property('plugin.id')
             //noinspection GroovyAssignabilityCheck
             implementationClass = property('plugin.class')
        }
    }
}

/* Task responsible for copying the Archive (jar) to the releases folder when built */
task copyArchive(type: Copy) {
    from "build/libs/${archivesBaseName}-${version}.jar"
    into this.property('build-output.directory')
}
if (property('build-output') == "true")
    build.finalizedBy('copyArchive')

/* Simple task to display a summary of the build including version number. */
build.finalizedBy('buildSummary')
task buildSummary {
    System.out.println("********* Build Complete: ${archivesBaseName}-${version} ********* ")
}

/* Gets a ModBuilder property 'project.modbuilder.*' from gradle.properties  */
Object property(String key) {
    return project.properties['project.modbuilder.' + key]
}
